#!/usr/bin/env python3


import os
import sys
import shlex
import tempfile
import subprocess
import traceback

from distutils import spawn


def call_zenity(str_args):
    command = ['/usr/bin/zenity'] + shlex.split(str_args)

    try:
        return subprocess.check_output(
                    command, 
                    stderr=subprocess.DEVNULL).decode('utf-8').strip()
    except subprocess.CalledProcessError as exc:
        # ensure we handle user Cancelled action
        if exc.returncode == 1:
            return False
        
        # otherwise put exception back on stack
        raise


def ask_url():
    args = """--entry
            --text='Please specify the URL or item to search. Press enter when you are done.'
            --title='Youtube Download'"""
    return call_zenity(args)


def main(youtube_dl_args):
    # print help message
    if '--help' in youtube_dl_args:
        this_bin = os.path.basename(sys.argv[0])
        print('Usage: {0} [--help] [YOUTUBE_DL_ARGS]'.format(this_bin))
        return 0

    # keep prompting urls until receive empty
    should_continue, urls = True, []
    while should_continue:
        if url:
            urls.append(url)
        url = ask_url()
        else:
            should_continue = False

    # we do not want emptyness
    if not urls:
        return 0

    confirmation_question = """--question --width=350 
                            --text="The following URLs will be downloaded. Continue?\n"""
    confirmation_question += '\n'.join(urls)
    
    # close opened double quotes
    confirmation_question += '"'

    # confirm with user wheter to proceed
    if call_zenity(confirmation_question) is False:
        return 1
    
    # create directory to download files
    tmpdir = tempfile.TemporaryDirectory()
    
    os.chdir(tmpdir.name)

    # binary from package manager, pip, whatever
    youtube_dl_bin = spawn.find_executable('youtube-dl')
    if youtube_dl_bin is None:
        call_zenity('--error --text="Missing requirement: youtube-dl"')
        return 127

    # build default youtube-dl params
    command = [youtube_dl_bin] + youtube_dl_args
    
    for url in urls:
        # try to download; handle a possible exception; keep moving
        try:
            subprocess.run(command + [url])
        except:
            traceback.print_exc()

    # move directory with downloaded videos to some vm 
    subprocess.run(['/usr/bin/qvm-move', tmpdir.name], check=True)

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))